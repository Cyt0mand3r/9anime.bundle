#!/usr/bin/env python

"""9anime.to Service Code"""

import common as Common
from network import Network
from metadata import Metadata
from openload import OpenloadStreamFromURL

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)/watch/.+\.(\w+)/(\w+)')
RE_HLS = Regex(r'["\']?file["\']? *?\: *?["\']((?:https?)?//[^"\']+\.m3u8.*?)["\']')
RE_SUB1 =  Regex(r'(?m)(^[^\#])')
RE_SOURCES = Regex(r'(?m)(^.+?\d+/(\d+).+$)')

####################################################################################################
def NormalizeURL(url):

    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

    meta = Metadata(url)
    if meta.kind_simple == 'Movie':
        return MovieObject(
            title=meta.show_name,
            source_title='9anime',
            rating=meta.score,
            duration=meta.duration,
            genres=meta.genres,
            tags=meta.tags,
            originally_available_at=meta.oaa,
            year=meta.year,
            thumb=Resource.ContentsOfURLWithFallback([meta.thumb, meta.thumb_fallback]),
            art=Resource.ContentsOfURLWithFallback([meta.art, meta.art_fallback]),
            summary=meta.summary
            )
    ep = meta.cepinfo_dict()
    return EpisodeObject(
        title=ep['title'] if ep else meta.show_name,
        show=meta.show_name,
        season=int(ep['season']) if ep else 0,
        index=int(ep['epn']) if ep else 0,
        source_title='9anime',
        rating=meta.score,
        duration=meta.duration,
        tags=meta.tags,
        originally_available_at=meta.oaa,
        #year=meta.year,
        thumb=Resource.ContentsOfURLWithFallback([meta.thumb, meta.thumb_fallback]),
        art=Resource.ContentsOfURLWithFallback([meta.art, meta.art_fallback]),
        summary=meta.summary
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution=res,
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url, res=res))
                ],
            ) for res in ('1080', '720', '480', '360')
        ]

####################################################################################################
@indirect
def PlayVideo(url, res='720', **kwargs):

    vurl = None
    host = '9anime'
    meta = Metadata(url)
    if meta.kind_simple != 'Movie':
        ep = meta.cepinfo_dict()
        url = Prefs['domain'] + ep['href']

    r = RE_NORM.search(url)
    if not r:
        raise Ex.MediaNotAvailable

    base_url = r.group(1)
    sid = r.group(2)
    vid = r.group(3)
    data_url = base_url + '/ajax/episode/info?id=' + vid

    http_headers = {'Referer': url, 'User-Agent': Common.USER_AGENT}

    # token handler
    cookies = Network.get_cookies()
    if not cookies:
        for u in [data_url, base_url, url]:
            Network.unCache(u)
        cookies = Network.get_cookies()
    if not cookies:
        Log.Error(u"* Cannot handle cookies for {}.  Contact Twoure with logs.".format(data_url))
        raise Ex.MediaNotAvailable

    http_headers['Cookie'] = cookies
    Log("* 9anime Cookies for {}\n{}".format(url, http_headers['Cookie']))

    # grabber handler
    resp = Network.Request(data_url, http_headers)
    data = resp.json()
    if ('error' in data.keys()) and data['error']:
        Log.Error(u"* 9anime Grabber Error: {}".format(data['error']))
        raise Ex.MediaNotAvailable
    Log(data)
    # setup ol streams
    if (data['target']) and ('openload' in data['target'].lower()):
        vurls = list()
        vurl = openload_stream(clean_url2(data['target']))
        q = 'Openload'
        host = q
    # setup mc streams
    elif (data['target']) and ('mycloud' in data['target'].lower()):
        vurls = mycloud_streams(clean_url2(data['target']))
        host = 'MyCloud'
    # setup 9a streams
    elif data['params']:
        grabber = clean_url(Network.AddParamsToURL(data['grabber'], data['params']))
        # streams handler
        resp = Network.Request(grabber, http_headers)
        streams = resp.json()
        if ('error' in streams.keys()) and streams['error']:
            Log.Error(u"* 9anime Video Error: {}".format(streams['error']))
            raise Ex.MediaNotAvailable
        vurls = [{'label': int(s['label'][:-1]), 'file': s['file']} for s in streams['data'] if s['type'] == 'mp4']
        Log.Debug("* 9anime Video Sources: {}".format(vurls))

    # Mark watched
    if vurls and Prefs['login']:
        values = {
            'username': Prefs['username'],
            'password': Prefs['password'],
            'remember': '1'
            }
        resp = Network.Request(base_url+'/user/login', values=values, method='POST')
        http_headers['Cookie'] = Network.cookies_from_res(resp)

        Network.Request(base_url+'/user/ajax/playing', values={"data[%s]" %sid: vid}, headers=http_headers)
        Network.unCache(base_url+'/user/ajax/playing')

        if Prefs['lswitch']:
            html = Network.ElementFromURL(url.rsplit("/",1)[0])
            next_episode_number = int(html.xpath('//div[@id="servers"]//a[@href="%s"]' %url.split(".to",1)[1])[0].get('data-base')) + 1
            try:
                html.xpath("//div[@id='servers']/div[@class='server row'][1]//li/a[@data-base='%s']/@href" %str(next_episode_number))[0]
                Network.unCache(base_url + "/user/ajax/edit-watchlist?folder=watching&id=%s&R=1" %sid)
                Network.Request(base_url + "/user/ajax/edit-watchlist?folder=watching&id=%s&R=1" %sid, headers=http_headers)
            except:
                status = html.xpath("//dl[@class='meta col-sm-12'][1]/dd[6]/text()")[0].strip()
                if (status.lower() == "airing"):
                    Network.unCache(base_url + "/user/ajax/edit-watchlist?folder=watching&id=%s&R=1" %sid)
                    Network.Request(base_url + "/user/ajax/edit-watchlist?folder=watching&id=%s&R=1" %sid, headers=http_headers)
                else:
                    Network.unCache(base_url + "/user/ajax/edit-watchlist?folder=watched&id=%s&R=1" %sid)
                    Network.Request(base_url + "/user/ajax/edit-watchlist?folder=watched&id=%s&R=1" %sid, headers=http_headers)

    if vurls:
        for s in Util.ListSortedByKey(vurls, 'label'):
            vurl = s['file']
            q = s['label']
            if s['label'] == int(res):
                break
            elif s['label'] > int(res):
                break

    if vurl and (host == 'MyCloud'):
        Log.Debug('* PlayDirect URL = {} | {}'.format(q, vurl))
        return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(Callback(PlayDirect, url=vurl)))
    elif vurl and (host != 'MyCloud'):
        Log.Debug('* PlayVideo URL = {} | {}'.format(q, vurl))
        return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def openload_stream(url):
    Log("* Finding Openload Stream from '{}'".format(url))
    headers = {'User-Agent': Common.USER_AGENT, 'Referer': url}
    ourl = OpenloadStreamFromURL(url, headers)
    if not ourl:
        Log.Warn("* Cannot handle Openload stream from {}".format(url))
        return

    vurl = None
    try:
        HTTP.Request(ourl, headers=headers, follow_redirects=False, method='HEAD').load()
        vurl = ourl
    except Ex.RedirectError as e:
        if 'Location' in e.headers:
            vurl = e.headers['Location']
        elif 'location' in e.headers:
            vurl = e.headers['location']
    return vurl

####################################################################################################
def mycloud_streams(url):
    Log("* Finding MyCloud Stream(s) from '{}'".format(url))
    vurls = list()
    r = RE_HLS.search(HTTP.Request(url, cacheTime=10).content)
    if not r:
        Log.Warn("* Failed to find MyCloud Streams")
        return vurls

    hls_url = clean_url2(r.group(1))
    page = HTTP.Request(hls_url, cacheTime=10).content
    page = RE_SUB1.sub(hls_url.rsplit('/', 1)[0]+r'/\1', page)
    for (u, r) in RE_SOURCES.findall(page):
        vurls.append({'file': u, 'label': int(r)})
    return vurls

####################################################################################################
def PlayDirect(url, **kwargs):
    page = HTTP.Request(url, cacheTime=10).content
    return RE_SUB1.sub(url.rsplit('/', 1)[0]+r'/\1', page)

####################################################################################################
def clean_url2(url):
    if url.startswith('//'):
        url = 'http:' + url
    return url

####################################################################################################
def clean_url(url):
    if url.startswith('//'):
        url = 'https:' + url
    elif url.startswith('/'):
        url = Prefs['domain'] + url
    return url
